<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

	<!-- 3. db를 통해 security 유저정보와 권한 얻는 방식 -->

	<!-- 검사 URL -->
	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/login/loginForm"
			access="permitAll" />
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/admin/**"
			access="hasRole('ADMIN')" />
		<intercept-url pattern="/**"
			access="hasAnyRole('USER, ADMIN')" />

		<form-login login-page="/login/loginForm"
			default-target-url="/"
			authentication-failure-url="/login/loginForm?error"
			username-parameter="id" password-parameter="password" />

		<logout logout-url="/logout" logout-success-url="/" />

		<access-denied-handler
			error-page="/login/accessDenied" />
	</http>


	<!-- *** JDBC를 이용한 인증/권한 처리 -->
	<!-- => JDBC를 이용하여 인증/권한 체크 방식은 크게 두 가지임 -->
	<!-- 1) 지정된 형식으로 테이블을 생성하는 방법 -->
	<!-- 2) 기존에 작성된 데이터 베이스와 연동하는 방법 -->

	<!-- 현재는 1번 방식: 지정된 형식으로 table을 작성 후 아래와 같이 데이터 베이스와 연동 시켜도 됨 -->
	<!-- =>> userName, password, enabled, authority는 Spring에서 지정된 컬럼명!! -->


	<beans:bean id="userDetailsService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<!-- <jdbc-user-service data-source-ref="dataSource" role-prefix="" users-by-username-query="select 
		username, password, enabled from users where username = ?" authorities-by-username-query="select 
		username, authority from authorities where username = ?" group-authorities-by-username-query="select 
		g.id, g.group_name, ga.authority from groups g, group_members gm, group_authorities 
		ga where gm.username = ? and g.id = ga.group_id and g.id = gm.group_id" /> -->

	<!-- provider -->
	<authentication-manager>
		<authentication-provider>
			<!-- users-by-username-query : login 쿼리 -->
			<!-- authorities-by-username-query : authority 쿼리 -->
			<jdbc-user-service data-source-ref="dataSource"
				role-prefix=""
				users-by-username-query="select username, password, enabled from users where username = ?"
				authorities-by-username-query="select username, authority from authorities where username = ?" />
		</authentication-provider>
	</authentication-manager>

	<!-- <authentication-manager> <authentication-provider> <jdbc-user-service 
		data-source-ref="dataSource" /> </authentication-provider> </authentication-manager> -->

</beans:beans>