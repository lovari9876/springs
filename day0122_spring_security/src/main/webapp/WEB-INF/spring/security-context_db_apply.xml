<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

	<!-- 4. 기존에 작성된 데이터베이스를 연동하는 방식 -->
	<!-- 형식에 맟춘 db가 아니라 기존에 가지고 있던 table를 활용한다. -->

	<!-- 검사 URL -->
	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/login/loginForm"
			access="permitAll" />
		<intercept-url pattern="/" access="permitAll" />
		<intercept-url pattern="/admin/**"
			access="hasRole('ADMIN')" />
		<intercept-url pattern="/**"
			access="hasAnyRole('USER, ADMIN')" />

		<form-login login-page="/login/loginForm"
			default-target-url="/"
			authentication-failure-url="/login/loginForm?error"
			username-parameter="id" password-parameter="password" />

		<logout logout-url="/logout" logout-success-url="/" />

		<access-denied-handler
			error-page="/login/accessDenied" />
	</http>

	<beans:bean id="userDetailsService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>


	<!-- *** JDBC를 이용한 인증/권한 처리 -->
	<!-- => JDBC를 이용하여 인증/권한 체크 방식은 크게 두 가지임 -->
	<!-- 1) 지정된 형식으로 테이블을 생성하는 방법 -->
	<!-- 2) 기존에 작성된 데이터 베이스와 연동하는 방법 -->

	<!-- 현재는 2번 방식: 기존에 작성된 데이터 베이스와 연동하는 방법 -->
	<!-- => users-by-username-query를 통해 ID에 따른 비번 일치 여부를 확인 -->
	<!-- => authorities-by-username-query에서 로그인에 성공한 사용자 권한을 확인 -->
	<!-- 위의 두 쿼리를 활용하는 형태임 -->

	<!-- ex) scott의 기본적인 emp 테이블을 활용한 예 -->


	<!-- JONES 7566 -->
	<!-- provider -->
	<authentication-manager>
		<authentication-provider>
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select ename, empno, 1  from emp where ename = ?"
				authorities-by-username-query="select ename, case when job='MANAGER' then 'ROLE_ADMIN' else  'ROLE_USER' end authority from emp where ename=?" />
			<!-- 로그인 쿼리: 쿼리에서 뽑을 컬럼을 차례로 username, password, enabled 순으로 지정해준다. -->
			<!-- 권한 쿼리: 쿼리에서 뽑을 컬럼을 차례로 username, authority 순으로 지정해주면서, case when 
				문법으로 사용하고 싶은 컬럼의 값을 authority 값의 형식으로 바꾸어주어 spring-security가 인식하도록 해준다! -->
		</authentication-provider>
	</authentication-manager>

	<!-- <authentication-manager> <authentication-provider> <jdbc-user-service 
		data-source-ref="dataSource" /> </authentication-provider> </authentication-manager> -->

</beans:beans>